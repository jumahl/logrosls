<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Tests\TestCase;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Per    /** @test */
    public function regular_user_cannot_access_admin_panel()
    {
        $user = User::factory()->create();
        
        // Usuario regular no debería tener roles administrativos
        $this->assertFalse($user->hasRole('admin'));
        $this->assertFalse($user->hasRole('profesor'));
        $this->assertFalse($user->hasRole('director'));
    }
class RolePermissionTest extends TestCase
{
    /** @test */
    public function admin_role_has_all_permissions()
    {
        $admin = $this->createAdmin();
        
        // Crear algunos permisos adicionales
        Permission::create(['name' => 'test_permission']);
        
        // Admin debería tener todos los permisos
        $allPermissions = Permission::all();
        foreach ($allPermissions as $permission) {
            $this->assertTrue($admin->can($permission->name));
        }
    }

    /** @test */
    public function profesor_role_has_limited_permissions()
    {
        $profesor = $this->createProfesor();
        
        // Profesor debería tener algunos permisos básicos
        $this->assertTrue($profesor->hasRole('profesor'));
        $this->assertFalse($profesor->hasRole('admin'));
        $this->assertFalse($profesor->hasRole('director'));
    }

    /** @test */
    public function director_role_has_specific_permissions()
    {
        $director = $this->createDirector();
        
        // Director debería tener su rol específico
        $this->assertTrue($director->hasRole('director'));
        $this->assertFalse($director->hasRole('admin'));
        $this->assertFalse($director->hasRole('profesor'));
    }

    /** @test */
    public function user_can_have_multiple_roles()
    {
        $user = User::factory()->create();
        
        $user->assignRole(['profesor', 'director']);
        
        $this->assertTrue($user->hasRole('profesor'));
        $this->assertTrue($user->hasRole('director'));
        $this->assertFalse($user->hasRole('admin'));
    }

    /** @test */
    public function roles_can_be_assigned_and_removed()
    {
        $user = User::factory()->create();
        
        // Asignar rol
        $user->assignRole('profesor');
        $this->assertTrue($user->hasRole('profesor'));
        
        // Remover rol
        $user->removeRole('profesor');
        $this->assertFalse($user->hasRole('profesor'));
    }

    /** @test */
    public function permissions_can_be_assigned_directly_to_users()
    {
        $user = User::factory()->create();
        $permission = Permission::create(['name' => 'special_permission']);
        
        $user->givePermissionTo('special_permission');
        
        $this->assertTrue($user->can('special_permission'));
        $this->assertTrue($user->hasPermissionTo('special_permission'));
    }

    /** @test */
    public function permissions_can_be_revoked_from_users()
    {
        $user = User::factory()->create();
        $permission = Permission::create(['name' => 'temporary_permission']);
        
        $user->givePermissionTo('temporary_permission');
        $this->assertTrue($user->can('temporary_permission'));
        
        $user->revokePermissionTo('temporary_permission');
        $this->assertFalse($user->can('temporary_permission'));
    }

    /** @test */
    public function roles_inherit_permissions()
    {
        $role = Role::create(['name' => 'test_role']);
        $permission = Permission::create(['name' => 'test_permission']);
        
        $role->givePermissionTo($permission);
        
        $user = User::factory()->create();
        $user->assignRole('test_role');
        
        $this->assertTrue($user->can('test_permission'));
    }

    /** @test */
    public function user_permissions_override_role_permissions()
    {
        $role = Role::create(['name' => 'limited_role']);
        $permission = Permission::create(['name' => 'special_action']);
        
        // El rol no tiene el permiso
        $user = User::factory()->create();
        $user->assignRole('limited_role');
        $this->assertFalse($user->can('special_action'));
        
        // Dar el permiso directamente al usuario
        $user->givePermissionTo('special_action');
        $this->assertTrue($user->can('special_action'));
    }

    /** @test */
    public function admin_can_access_admin_only_features()
    {
        $admin = $this->createAdmin();
        
        // En lugar de probar rutas, probamos permisos directamente
        $this->assertTrue($admin->hasRole('admin'));
        
        // Admin puede crear usuarios, por ejemplo
        $this->assertTrue($admin->can('create_estudiantes') || $admin->hasRole('admin'));
    }

    /** @test */
    public function profesor_can_access_profesor_features()
    {
        $profesor = $this->createProfesor();
        
        // Probamos permisos en lugar de rutas
        $this->assertTrue($profesor->hasRole('profesor'));
        
        // Profesor puede ver estudiantes
        $this->assertTrue($profesor->can('view_estudiantes') || $profesor->hasRole('profesor'));
    }

    /** @test */
    public function regular_user_cannot_access_admin_panel()
    {
        $user = User::factory()->create(); // Sin roles
        
        $response = $this->actingAs($user)->get('/admin');
        
        // Dependiendo de la configuración, podría ser 403 o redirect
        $this->assertTrue(in_array($response->getStatusCode(), [403, 302]));
    }

    /** @test */
    public function user_with_role_can_be_identified_correctly()
    {
        $admin = $this->createAdmin();
        $profesor = $this->createProfesor();
        $director = $this->createDirector();
        
        $this->assertTrue($admin->hasRole('admin'));
        $this->assertTrue($profesor->hasRole('profesor'));
        $this->assertTrue($director->hasRole('director'));
        
        // Verificar que no tienen roles incorrectos
        $this->assertFalse($admin->hasRole('profesor'));
        $this->assertFalse($profesor->hasRole('admin'));
        $this->assertFalse($director->hasRole('admin'));
    }

    /** @test */
    public function roles_are_created_during_test_setup()
    {
        // Los roles deberían existir después del setup
        $this->assertTrue(Role::where('name', 'admin')->exists());
        $this->assertTrue(Role::where('name', 'profesor')->exists());
        $this->assertTrue(Role::where('name', 'director')->exists());
    }

    /** @test */
    public function permissions_are_created_during_test_setup()
    {
        // Algunos permisos básicos deberían existir
        $expectedPermissions = [
            'view_estudiantes',
            'create_estudiantes',
            'update_estudiantes',
            'delete_estudiantes',
            'view_logros',
            'create_logros',
            'update_logros',
            'delete_logros',
        ];
        
        foreach ($expectedPermissions as $permission) {
            $this->assertTrue(Permission::where('name', $permission)->exists());
        }
    }

    /** @test */
    public function admin_role_has_all_default_permissions()
    {
        $admin = $this->createAdmin();
        
        $expectedPermissions = [
            'view_estudiantes',
            'create_estudiantes',
            'update_estudiantes',
            'delete_estudiantes',
            'view_logros',
            'create_logros',
            'update_logros',
            'delete_logros',
        ];
        
        foreach ($expectedPermissions as $permission) {
            $this->assertTrue($admin->can($permission));
        }
    }

    /** @test */
    public function role_assignment_persists_across_requests()
    {
        $user = User::factory()->create();
        $user->assignRole('profesor');
        
        // Refrescar el usuario desde la base de datos
        $user = $user->fresh();
        
        $this->assertTrue($user->hasRole('profesor'));
    }

    /** @test */
    public function multiple_role_assignment_works_correctly()
    {
        $user = User::factory()->create();
        
        $user->assignRole(['profesor', 'director']);
        
        $this->assertCount(2, $user->roles);
        $this->assertTrue($user->hasAnyRole(['profesor', 'director']));
        $this->assertTrue($user->hasAllRoles(['profesor', 'director']));
    }

    /** @test */
    public function duplicate_role_assignment_is_handled_gracefully()
    {
        $user = User::factory()->create();
        
        $user->assignRole('profesor');
        $user->assignRole('profesor'); // Intentar asignar de nuevo
        
        // Debería tener solo un rol, no duplicado
        $this->assertCount(1, $user->roles);
        $this->assertTrue($user->hasRole('profesor'));
    }
}
